@model IssueTracker.Models.ProjectUserModel

@Styles.Render("~/Content/themes/base/css")


@using (Ajax.BeginForm("ManageMembers", "ProjectUser", null, new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnSuccess", OnFailure = "OnFailure" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ProjectUserModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserEmail, new { htmlAttributes = new { @class = "ui-autocomplete form-control", @id = "UserEmail" } })

                @Html.ValidationMessageFor(model => model.UserEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.ProjectID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProjectID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProjectID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}


@section Scripts{
<script>
            function OnSuccess(data) {
                location.reload(true);
            }
            function OnFailure(data) {
                alert("Role or Email provided is incorrect");
            }

    $(document).ready(function () {

                $(function () {
                console.log("segs");
                var users = new Array();
                var projectID = @ViewBag.projectID;
                $.ajax({
                    url: "/ProjectUser/AllUsersEmailAndName",
                    contentType: "application/html; charset=utf-8",
                    type: "GET",
                    async: false,
                    data: { projectID: projectID },
                    success: function (json) {
                        users = $.map(json, function (data) {
                            return {
                                label: data.Email,
                                value: data.Email,
                                name: data.FirstName + " " + data.LastName
                            };
                        });
                    }
                });
                $("#UserEmail").autocomplete({
                    minLength: 3,
                    source: users,
                    delay: 500,
                    focus: function (event, ui) {
                        $("#UserEmail").val(ui.item.label);
                        return false;
                    },
                    select: function (event, ui) {
                        $("#UserEmail").val(ui.item.label);

                        return false;
                    }
                }).data("ui-autocomplete")._renderItem = function (ul, item) {
                    return $("<li>")
                        .data("ui-autocomplete-item", item)
                        .append("<p>" + item.label + "<br>" + item.name + "</p>")
                        .appendTo(ul);
                };
            });
            });



</script>
 }
