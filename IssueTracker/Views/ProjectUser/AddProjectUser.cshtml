@model IssueTracker.Models.ProjectUserModel

@{
    ViewBag.Title = "AddProjectUser";
}

@Styles.Render("~/Content/themes/base/css")

<h2>AddProjectUser</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ProjectUserModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="tags" class="ui-autocomplete form-control" style="list-style:none"/>

                @Html.ValidationMessageFor(model => model.UserEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")

    <script>
        // Not the best implementation, it really could do with improving.
        // It loads in the entire table, then maps it into an array for the autocomplete.
        // To improve this, we can change the source to a function callback, where each keyup
        // we query the database with user input to find like email. The result is then fully
        // presented to the user.
        $(function () {
            var projectID = @ViewBag.projectID;
            var users = new Array();

            $.ajax({
                url: "/ProjectUser/AllUsersEmailAndName",
                contentType: "application/html; charset=utf-8",
                type: "GET",
                async: false,
                data: { projectID: projectID },
                success: function (json) {
                    console.log(json);
                    users = $.map(json, function (data) {
                        return {
                            label: data.Email,
                            value: data.Email,
                            name: data.FirstName + " " + data.LastName
                        };
                    });
                }
            });
            console.log(users);
            $("#tags").autocomplete({
                minLength: 3,
                source: users,
                delay: 500,
                focus: function (event, ui) {
                    $("#tags").val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    $("#tags").val(ui.item.label);

                    return false;
                }
            }).data("ui-autocomplete")._renderItem = function (ul, item) {
                return $("<li>")
                    .data("ui-autocomplete-item", item)
                    .append("<p>" + item.label + "<br>" + item.name + "</p>")
                    .appendTo(ul);
            };
        });

    </script>
}

@*                    $.ajax({
        url: "/ProjectUser/FindUsersInProjectJson",
        contentType: "application/html; charset=utf-8",
        type: "GET",
        data: { "projectID": projectID },
        success: function (data) {
            response([{ value: "suck my fucking dick" }, { value: "huh" }])
        }
    });*@








@*                source: function () {
        $.ajax({
            url: "/ProjectUser/FindUsersInProjectJson",
            contentType: "application/html; charset=utf-8",
            type: "GET",
            data: { "projectID": projectID },
            success: function (data) {
                for (var i = 0; i < data.length; i++) {
                    users[i] = {"value" : data[i].UserEmail, "UserName" : data[i].UserName};
                }
                return users;
            }
        });
    }*@